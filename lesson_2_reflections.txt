	1. What happens when you initialize a repository? Why do you need to do it?
		-	When i initialize a repository, it's like i created an empty git,
			with no commit in there.
		-	I need to do it - initialize a repository to manage all of the version of my file
			in the specific directory.

	2. How is the staging area different from the working directory and the repository? What value do you think it offers?
		- The staging area has a recent state of files ready to be added into commit. 
			+ The repository has commits, which contain the state of files.
			+ The working directory, contain all the permanent files of project and computer.
		- The staging area offers all the recent state of files ready to be add into commit.

	3. How can you use the staging area to make sure you have one commit per logical change?
		- By using The Staging Area, we can double-check to make sure to create a new commit with logical change,
		  and if i aren't sure that the change is a logical change or not, we can remove the change every time we want, or add it later.

	4. What are some situations when branches would be helpful in keeping your history organized? How would branches help?
		- Branch would help me to create, test some experimental features if i want to, then easily switch back to the master branch.
			+ Branch just like a sub-commit, which is a state of some experimental change.
	
	5. How do the diagrams help you visualize the branch structure?
		- The diagram help me to visualize the branch structure by showing me the line, the asterisk of each branch, each parent with their commits.

	6. What is the result of merging two branches together? Why do we represent it in the diagram the way we do?
		- When we merge two branches together, it'll automatically create a new branch which connect all the file of two branch into the new branch.
		- By representing it in the the diagram we just did, we can see the branch structure clearly, see all the functions we want to create in our project and progam.

	7. What are the pros and cons of Gitâ€™s automatic merging vs. always doing merges manually?
		- Automatic merging: 
			+ pros: it's simple and really quick by using very few of commands.
			+ cons: if there are some change in both branch and those change is in the same file, it could make merge conflict, and git can't choose which change to take.
		- always doing merges manually:
			+ pros: always fix the merge conflict, make file runable.
			+ cons: take lots of time, and we have to find the the conflict, the differences between two files.